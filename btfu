#!/usr/bin/env python

import argparse
import datetime
import getpass
import os
import subprocess
import sys
import tempfile

from btfupy import conf
from btfupy import fs
from btfupy.blobstore import treestore
from btfupy.blobstore import server

HOME_PATH = os.environ['HOME']
DEFAULT_BLOBSTORE_NAME = '.btfu'


DEFAULT_CONFIG = {
    'blobstore-path': os.path.join(HOME_PATH, '.btfu'),
    'client-url': 'localhost:3243',
    'server-host': '',
    'server-port': 3243,
}


def get_rootref():
    try:
        with open(treestore.ROOTREF_FILE) as fp:
            return fp.read()
    except IOError:
        return None


def set_rootref(ref):
    with open(treestore.ROOTREF_FILE, 'wb') as fp:
        fp.write(ref)


def btfu_checkout(args):
    """Copy the current root into the current working directory."""
    def loop(treeref, dirname='.'):
        for attr in args.store.get_tree(treeref):
            path = os.path.join(dirname, attr.name)
            if attr.typ == treestore.TYPE_BLOB:
                with open(path, 'wb') as fp:
                    fp.write(args.store.get_blob(attr.ref))
                os.chmod(path, attr.mod)
            elif attr.typ == treestore.TYPE_TREE:
                if not os.path.exists(path):
                    os.mkdir(path)
                os.chmod(path, attr.mod)
                loop(attr.ref, path)
    try:
        os.mkdir(args.dest)
    except IOError, e:
        print e
        exit(1)
    loop(args.treeref, args.dest)


def btfu_commit(args):
    """Put the working directory tree and create a root reference."""
    # FIXME: right now `add` just rebuilds the entire root tree. It should be
    # able to add a single file and simply rebuild its parent branches.
    rootref = get_rootref()
    rootref = args.store.put_root(rootref, '.')
    set_rootref(rootref)
    print rootref


def btfu_get(args):
    """Print a blob to stdout."""
    print args.store.get_blob(args.ref),


def btfu_hist(args):
    """Display the history of the given root."""
    rootref = get_rootref()
    while rootref is not None:
        root = args.store.get_root(rootref)
        print rootref, (datetime.datetime
                        .fromtimestamp(float(root.ctime))
                        .strftime('%Y-%m-%d %H:%M:%S'))
        rootref = root.rootref


def btfu_list(args):
    """Display a list of files in the current root."""
    def index_build(treeref, dirpath=''):
        for attr in args.store.get_tree(treeref):
            attr.name = os.path.join(dirpath, attr.name)
            print attr
            if attr.typ == treestore.TYPE_TREE:
                index_build(attr.ref, attr.name)
    if args.treeref is None:
        rootref = get_rootref()
        root = args.store.get_root(rootref)
        tree = root.tree
        args.treeref = root.tree
    else:
        tree = args.store.get_tree(args.treeref)
    print str(tree)
    index_build(tree.ref)


def btfu_mount(args):
    """Mount the given tree."""
    if args.treeref is None:
        args.treeref = args.store.get_root(get_rootref()).tree.ref
    tmp = args.mountpoint is None
    if tmp:
        args.mountpoint = tempfile.mkdtemp()
    if args.run:
        subprocess.Popen([args.run, args.mountpoint], preexec_fn=os.setpgrp)
    print >>sys.stderr, 'mounting %s to %s' % (args.treeref, args.mountpoint)
    fs.mount(args.store, args.treeref, args.mountpoint)
    if tmp:
        os.rmdir(args.mountpoint)


def btfu_put(args):
    """Put a blob in the blobstore."""
    if args.path is None:
        print args.store.put_blob(sys.stdin.read())
    else:
        print args.store.put_file(args.path)


def btfu_roots(args):
    """Show a list of all the archived roots."""
    for root in args.store.get_roots():
        print root


def btfu_serve(args):
    """Start the blob server."""
    store_path = args.conf.get('blobstore-path')
    host = args.host or args.conf['server-host']
    port = args.port or args.conf['server-port']
    auth_token = args.conf.get('auth-token')
    ssl_key = args.conf.get('server-ssl-key')
    ssl_cert = args.conf.get('server-ssl-cert')
    print >>sys.stderr, 'listening on %s:%d' % (host, port)
    if auth_token is None:
        print >>sys.stderr, 'WARNING: authentication is disabled'
    if not (ssl_key and ssl_cert):
        print >>sys.stderr, 'WARNING: SSL is disabled'
    daemon = server.BlobServer(store_path, host, port, auth_token=auth_token,
                               ssl_cert=ssl_cert, ssl_key=ssl_key)
    try:
        daemon.serve_forever()
    except KeyboardInterrupt:
        daemon.shutdown()


def add_parser(subparsers, name, func):
    subparser = subparsers.add_parser(name, help=func.__doc__)
    subparser.set_defaults(func=func)
    return subparser


def main(args):
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--confpath',
                        default=os.path.join(HOME_PATH, '.btfurc'),
                        help='config file to use')
    subparsers = parser.add_subparsers()
    # put
    subparser = add_parser(subparsers, 'put', btfu_put)
    subparser.add_argument('path', nargs='?')
    # get
    subparser = add_parser(subparsers, 'get', btfu_get)
    subparser.add_argument('ref')
    # commit
    subparser = add_parser(subparsers, 'commit', btfu_commit)
    # checkout
    subparser = add_parser(subparsers, 'checkout', btfu_checkout)
    subparser.add_argument('treeref')
    subparser.add_argument('dest')
    # hist
    subparser = add_parser(subparsers, 'hist', btfu_hist)
    # list
    subparser = add_parser(subparsers, 'list', btfu_list)
    subparser.add_argument('treeref', nargs='?')
    # mount
    subparser = add_parser(subparsers, 'mount', btfu_mount)
    subparser.add_argument('treeref', nargs='?',
                           help='Reference to the tree to be mounted.')
    subparser.add_argument('-m', '--mountpoint', default=None,
                           help='Path to directory where tree gets mounted.')
    subparser.add_argument('-r', '--run', default=None,
                           help='Command to run with mountpoint as argument.')
    # roots
    subparser = add_parser(subparsers, 'roots', btfu_roots)
    # serve
    subparser = add_parser(subparsers, 'serve', btfu_serve)
    subparser.add_argument('--host', default=None)
    subparser.add_argument('--port', default=0, type=int)
    # ...
    args = parser.parse_args(args)
    func = args.func
    del args.func
    args.conf = DEFAULT_CONFIG
    if os.path.exists(args.confpath):
        with open(args.confpath) as fp:
            args.conf = dict(args.conf, **conf.load(fp))
    args.store = treestore.RootStore(args.conf['client-url'],
                                     auth_token=args.conf.get('auth-token'))
    func(args)


if __name__ == '__main__':
    main(sys.argv[1:])
