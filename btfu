#!/usr/bin/env python

import argparse
import datetime
import getpass
import os
import sys

import bs

store = bs.RootStore()


def get_rootref():
    try:
        with open(bs.ROOTREF_FILE) as fp:
            return fp.read()
    except IOError:
        return None


def set_rootref(ref):
    with open(bs.ROOTREF_FILE, 'wb') as fp:
        fp.write(ref)


def btfu_checkout(args):
    """Copy the current root into the current working directory."""
    def loop(treeref, dirname='.'):
        for attr in store.get_tree(treeref):
            path = os.path.join(dirname, attr.name)
            if attr.typ == bs.TYPE_BLOB:
                with open(path, 'wb') as fp:
                    fp.write(store.get_blob(attr.ref))
                os.chmod(path, attr.mod)
            elif attr.typ == bs.TYPE_TREE:
                if not os.path.exists(path):
                    os.mkdir(path)
                os.chmod(path, attr.mod)
                loop(attr.ref, path)
    try:
        os.mkdir(args.dest)
    except IOError, e:
        print e
        exit(1)
    loop(args.treeref, args.dest)


def btfu_commit(args):
    """Put the working directory tree and create a root reference."""
    # FIXME: right now `add` just rebuilds the entire root tree. It should be
    # able to add a single file and simply rebuild its parent branches.
    rootref = get_rootref()
    rootref = store.put_root(rootref, '.')
    set_rootref(rootref)
    print rootref


def btfu_get(args):
    """Print a blob to stdout."""
    print store.get_blob(args.ref),


def btfu_hist(args):
    """Display the history of the given root."""
    rootref = get_rootref()
    while rootref is not None:
        root = store.get_root(rootref)
        print rootref, (datetime.datetime
                        .fromtimestamp(float(root.ctime))
                        .strftime('%Y-%m-%d %H:%M:%S'))
        rootref = root.rootref


def btfu_list(args):
    """Display a list of files in the current root."""
    def index_build(treeref, dirpath=''):
        for attr in store.get_tree(treeref):
            attr.name = os.path.join(dirpath, attr.name)
            print attr
            if attr.typ == bs.TYPE_TREE:
                index_build(attr.ref, attr.name)
    if args.treeref is None:
        rootref = get_rootref()
        root = store.get_root(rootref)
        tree = root.tree
        args.treeref = root.tree
    else:
        tree = store.get_tree(args.treeref)
    print str(tree)
    index_build(tree.ref)


def btfu_mount(args):
    """Mount the given tree."""
    try:
        import fs
        if args.treeref is None:
            args.treeref = store.get_root(get_rootref()).tree.ref
        fs.mount(args.treeref, args.mountpoint)
    except ImportError, e:
        print >>sys.stderr, 'error: mount requires additional libraries:', e


def btfu_put(args):
    """Put a blob in the blobstore."""
    if args.path is None:
        print store.put_blob(sys.stdin.read())
    else:
        print store.put_file(args.path)


def btfu_roots(args):
    """Show a list of all the archived roots."""
    for root in store.get_roots():
        print root


def btfu_serve(args):
    """Start the blob server."""
    import server
    server.serve()


def btfu_setup(args):
    """Set up the blobstore."""
    store.setup()


def main(args):
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()
    # put
    subparser = subparsers.add_parser('put', help=btfu_put.__doc__)
    subparser.set_defaults(func=btfu_put)
    subparser.add_argument('path', nargs='?')
    # get
    subparser = subparsers.add_parser('get', help=btfu_get.__doc__)
    subparser.set_defaults(func=btfu_get)
    subparser.add_argument('ref')
    # commit
    subparser = subparsers.add_parser('commit', help=btfu_commit.__doc__)
    subparser.set_defaults(func=btfu_commit)
    # checkout
    subparser = subparsers.add_parser('checkout', help=btfu_checkout.__doc__)
    subparser.set_defaults(func=btfu_checkout)
    subparser.add_argument('treeref')
    subparser.add_argument('dest')
    # hist
    subparser = subparsers.add_parser('hist', help=btfu_hist.__doc__)
    subparser.set_defaults(func=btfu_hist)
    # list
    subparser = subparsers.add_parser('list', help=btfu_list.__doc__)
    subparser.set_defaults(func=btfu_list)
    subparser.add_argument('treeref', nargs='?')
    # mount
    subparser = subparsers.add_parser('mount', help=btfu_mount.__doc__)
    subparser.set_defaults(func=btfu_mount)
    subparser.add_argument('mountpoint', nargs='?')
    subparser.add_argument('treeref', nargs='?')
    # roots
    subparser = subparsers.add_parser('roots', help=btfu_roots.__doc__)
    subparser.set_defaults(func=btfu_roots)
    # serve
    subparser = subparsers.add_parser('serve', help=btfu_serve.__doc__)
    subparser.set_defaults(func=btfu_serve)
    # setup
    # TODO: make this automatic
    subparser = subparsers.add_parser('setup', help=btfu_setup.__doc__)
    subparser.set_defaults(func=btfu_setup)
    # ...
    args = parser.parse_args(args)
    func = args.func
    del args.func
    func(args)


if __name__ == '__main__':
    main(sys.argv[1:])
