#!/bin/bash

PROGNAME=`basename "$0"`
REPONAME=".$PROGNAME"
REPOPATH="$HOME/$REPONAME"
CONFPATH="$REPOPATH.conf"
HISTPATH="$REPOPATH/hist"
BLOBPATH="$REPOPATH/blob"
IGNORE="$REPONAME .git"

error() {
    echo "error: $*" >&2
    exit 1
}

blobref() {
    shasum "$1" | awk '{print $1}'
}

size() {
    stat "$1" | awk '{print $8}'
}

mode() {
    stat -f %p "$1"
}

ignore() {
    local filename
    for filename in $IGNORE; do
        if [ "$1" = "$filename" ]; then
            return 0
        fi
    done
    return 1
}

usage() {
    echo "usage: $PROGNAME [init]"
    exit 2
}

init() {
    if [ -e "$REPOPATH" ]; then
        error "$REPOPATH already exists"
    fi
    mkdir "$REPOPATH" "$BLOBPATH"
}

blobpath() {
    echo "$BLOBPATH/$1"
}

backup() {
    # TODO: compress and/or encrypt blob
    local dest=`blobpath "$2"`
    if [ ! -e "$dest" ]; then
        cp "$1" "$dest"
    fi
}

walk() {
    local dirname="$1"
    local tmp=`mktemp -t "$PROGNAME".XXXXXX`
    local sha=
    for filename in `ls -A "$dirname"`; do
        if ignore $filename; then
            continue
        fi
        local path="$dirname/$filename"
        if [ -d "$path" ]; then
            type=tree
            sha=`walk "$path"`
        else
            type=blob
            sha=`blobref "$path"`
            backup "$path" "$sha"
        fi
        echo "$type" "$sha" "$filename" >>"$tmp"
    done
    sha=`blobref "$tmp"`
    backup "$tmp" "$sha"
    rm "$tmp"
    echo "$sha"
}

main() {
    set -- `getopt :h $*`
    for arg; do
        case "$arg" in
            -h)
                usage
                shift
                ;;
            --)
                shift
                ;;
        esac
    done
    [ $# -eq 0 ] && usage
    case "$1" in
        init)
            init
            ;;
        walk)
            [ ! -e "$REPOPATH" ] && error "$REPOPATH does not exist"
            local datetime=`date "+%Y-%m-%dT%H:%M:%SZ"`
            local id=`walk "$PWD"`
            echo "$datetime" $id >>"$HISTPATH"
            echo $id
            ;;
        hist)
            tail -r "$HISTPATH"
            ;;
        root)
            tail -1 "$HISTPATH" | awk '{print $2}'
            ;;
        blob)
            shift
            cat "`blobpath "$1"`"
            ;;
        *)
            error "invalid command: $arg"
            ;;
    esac
}

main $*
